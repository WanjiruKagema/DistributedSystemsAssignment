/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ds_assignment_2;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.SwingUtilities;

/**
 *
 * @author kagema
 */
public class SocketServer extends javax.swing.JFrame {

    static ServerSocket serverSocket;
    static Socket socket;
    static DataInputStream dataInputStream;
    static DataOutputStream dataOutputStream;
    static ArrayList<String> serverRequests = new ArrayList<>();
    static ArrayList<String> toyDetails = new ArrayList<>();
    static int count;
    
    /**
     * Creates new form SocketServer
     */
    public SocketServer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SocketServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SocketServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SocketServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SocketServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SocketServer().setVisible(true);
                showMessage("Listening for client requests..........\n");
            }
        });
        String msgin = "";
        
        serverRequests.add("Enter the other toy information(Description, Price, Date of Manufacture, Batch Number)");
        serverRequests.add("Enter the toy manufacturers details(Street Address, Zip-Code and Country)");
        serverRequests.add("Send Thank You Message");
        serverRequests.add("Want to send all the information at once?");
        serverRequests.add("Information successfully recorded");


        try{
            serverSocket = new ServerSocket(3333);
            socket = serverSocket.accept();
            
            dataInputStream = new DataInputStream(socket.getInputStream());
            dataOutputStream = new DataOutputStream(socket.getOutputStream());            
            showMessage("New Client Connected\n");
            int i = 0;
            while(!msgin.equals("exit") && i < serverRequests.size()){
                msgin = dataInputStream.readUTF();
                
                msg_area.setText(msg_area.getText().trim()+"\n"+msgin+"\n");
                toyDetails.add(msgin);
                try{
                String msgout = "";
                msgout = serverRequests.get(i).trim();
                dataOutputStream.writeUTF(msgout);
                count++;
                i++;
            }
            catch(Exception e){}
            }
           
            String[] allDetails = toyDetails.toArray(new String[toyDetails.size()]);
            String toyDetailsString = allDetails[4];
            String[] tempArray = null;
            String delimeter = ", ";
            tempArray = toyDetailsString.split(delimeter);
            String[] labels = {"Code", "Name", "Description", "Price", "Date of Manufacture", "Batch Number", "Company Name", "Street Address", "Zip Code", "Country", "Thank You Message"};
            System.out.println(tempArray.length);
            
        }
        catch(Exception e){}
    }
    
    public static void showMessage(final String message){
                SwingUtilities.invokeLater(
                new Runnable(){
                    public void run(){
                        msg_area.append(message);
                    }
                }
        );
    }
    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    // End of variables declaration//GEN-END:variables
}
